/*
 * Created on 20 f√©vr. 2017 ( Time 04:16:10 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package fr.eugena.webservice.rest.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import fr.eugena.webservice.rest.bean.Collaborateur;
import fr.eugena.webservice.rest.bean.Conge;
import fr.eugena.webservice.rest.dao.CongeDAO;
import fr.eugena.webservice.rest.dao.GenericDAO;
import fr.eugena.webservice.rest.io.CompteurConge;

/**
 * Conge DAO implementation
 * 
 * @author Telosys Tools
 *
 */
@Repository
public class CongeDAOImplSpring extends GenericDAO<Conge> implements CongeDAO {

	private final static String SQL_SELECT = "select id_conge, fk_id_collaborateur, fk_id_type_conge, date_debut, date_fin, date_creation, date_validation from Conge where id_conge = ?";

	private final static String SQL_INSERT = "insert into Conge ( id_conge, fk_id_collaborateur, fk_id_type_conge, date_debut, date_fin, date_creation, date_validation ) values ( ?, ?, ?, ?, ?, ?, ? )";

	private final static String SQL_UPDATE = "update Conge set fk_id_collaborateur = ?, fk_id_type_conge = ?, date_debut = ?, date_fin = ?, date_creation = ?, date_validation = ? where id_conge = ?";

	private final static String SQL_DELETE = "delete from Conge where id_conge = ?";

	private final static String SQL_COUNT_ALL = "select count(*) from Conge";

	private final static String SQL_COUNT = "select count(*) from Conge where id_conge = ?";

	private final static String SQL_SELECT_GROUP_BY_TYPE = "select type_cong.code, count(1) as nombre from Conge cong "
			+ "inner join Type_conge type_cong on (type_cong.id_type_conge = cong.fk_id_type_conge) "
			+ "where cong.fk_id_collaborateur = ? "
			+ "group by type_cong.code ";

	// ----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public CongeDAOImplSpring() {
		super();
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public Conge find(Integer idConge) {
		Object[] primaryKey = new Object[] { idConge };
		return super.doSelect(primaryKey);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public boolean load(Conge conge) {
		return super.doSelect(conge);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public void insert(Conge conge) {
		super.doInsert(conge);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public int update(Conge conge) {
		return super.doUpdate(conge);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public int delete(Integer idConge) {
		Object[] primaryKey = new Object[] { idConge };
		return super.doDelete(primaryKey);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public int delete(Conge conge) {
		return super.doDelete(conge);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public boolean exists(Integer idConge) {
		Object[] primaryKey = new Object[] { idConge };
		return super.doExists(primaryKey);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public boolean exists(Conge conge) {
		return super.doExists(conge);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public long count() {
		return super.doCountAll();
	}

	// ----------------------------------------------------------------------
	// Super class abstract methods implementation
	// ----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT;
	}

	// ----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT;
	}

	// ----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE;
	}

	// ----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE;
	}

	// ----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT;
	}

	// ----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL;
	}

	// ----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForInsert(Conge conge) {
		return new Object[] {
				// --- Returns PRIMARY KEY and DATA ( for SQL
				// "SET x=?, y=?, ..." )
				conge.getIdConge(), // "id_conge" : java.lang.Integer
				conge.getFkIdCollaborateur(), // "fk_id_collaborateur" :
												// java.lang.Integer
				conge.getFkIdTypeConge(), // "fk_id_type_conge" :
											// java.lang.Integer
				conge.getDateDebut(), // "date_debut" : java.util.Date
				conge.getDateFin(), // "date_fin" : java.util.Date
				conge.getDateCreation(), // "date_creation" : java.util.Date
				conge.getDateValidation() // "date_validation" : java.util.Date
		};
	}

	// ----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForUpdate(Conge conge) {
		return new Object[] {
				// --- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
				conge.getFkIdCollaborateur(), // "fk_id_collaborateur" :
												// java.lang.Integer
				conge.getFkIdTypeConge(), // "fk_id_type_conge" :
											// java.lang.Integer
				conge.getDateDebut(), // "date_debut" : java.util.Date
				conge.getDateFin(), // "date_fin" : java.util.Date
				conge.getDateCreation(), // "date_creation" : java.util.Date
				conge.getDateValidation(), // "date_validation" : java.util.Date
				// --- Returns PRIMARY KEY at the end ( for SQL
				// "WHERE key=?, ..." )
				conge.getIdConge() // "id_conge" : java.lang.Integer
		};
	}

	// ----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForPrimaryKey(Conge conge) {
		return new Object[] {
		// --- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
		conge.getIdConge() // "id_conge" : java.lang.Integer
		};
	}

	// ----------------------------------------------------------------------
	@Override
	protected RowMapper<Conge> getRowMapper(Conge o) {
		// --- RowMapper to populate the given bean instance
		return new CongeRowMapper(o);
	}

	// ----------------------------------------------------------------------
	@Override
	protected RowMapper<Conge> getRowMapper() {
		// --- RowMapper to populate a new bean instance
		return new CongeRowMapper(new Conge());
	}

	// ----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * 
	 * @param rs
	 * @param conge
	 * @throws SQLException
	 */
	private void populateBean(ResultSet rs, Conge conge) throws SQLException {

		// --- Set data from ResultSet to Bean attributes
		conge.setIdConge(rs.getInt("id_conge")); // java.lang.Integer
		if (rs.wasNull()) {
			conge.setIdConge(null);
		}
		; // not primitive number => keep null value if any
		conge.setFkIdCollaborateur(rs.getInt("fk_id_collaborateur")); // java.lang.Integer
		if (rs.wasNull()) {
			conge.setFkIdCollaborateur(null);
		}
		; // not primitive number => keep null value if any
		conge.setFkIdTypeConge(rs.getInt("fk_id_type_conge")); // java.lang.Integer
		if (rs.wasNull()) {
			conge.setFkIdTypeConge(null);
		}
		; // not primitive number => keep null value if any
		conge.setDateDebut(rs.getDate("date_debut")); // java.util.Date
		conge.setDateFin(rs.getDate("date_fin")); // java.util.Date
		conge.setDateCreation(rs.getDate("date_creation")); // java.util.Date
		conge.setDateValidation(rs.getDate("date_validation")); // java.util.Date
	}

	// ----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class CongeRowMapper implements RowMapper<Conge> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private final Conge bean;

		/**
		 * Constructor
		 * 
		 * @param bean
		 *            the bean to be populated
		 */
		CongeRowMapper(Conge bean) {
			this.bean = bean;
		}

		@Override
		public Conge mapRow(ResultSet rs, int rowNum) throws SQLException {
			populateBean(rs, this.bean);
			return this.bean;
		}
	}

	@Override
	public List<CompteurConge> findByTypeConge(Collaborateur collaborateur) {
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		// --- Try to find the record. NB : Spring throws
		// "EmptyResultDataAccessException" if not found
		try {
			return jdbcTemplate.query(SQL_SELECT_GROUP_BY_TYPE,
					new Object[] { collaborateur.getIdCollaborateur() },
					new BeanPropertyRowMapper<CompteurConge>(CompteurConge.class));
		} catch (EmptyResultDataAccessException e) {
			// Nothing to do, just return null
			return null;

		}
	}

}
