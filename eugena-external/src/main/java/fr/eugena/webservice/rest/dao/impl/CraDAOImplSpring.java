/*
 * Created on 20 f√©vr. 2017 ( Time 04:16:10 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package fr.eugena.webservice.rest.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import fr.eugena.webservice.rest.bean.Collaborateur;
import fr.eugena.webservice.rest.bean.Cra;
import fr.eugena.webservice.rest.dao.CraDAO;
import fr.eugena.webservice.rest.dao.GenericDAO;

/**
 * Cra DAO implementation
 * 
 * @author Telosys Tools
 *
 */
@Repository
public class CraDAOImplSpring extends GenericDAO<Cra> implements CraDAO {

	private final static String SQL_SELECT = "select id_cra, fk_id_collaborateur, periode, date_creation, date_validation, check_modif from CRA where id_cra = ?";

	private final static String SQL_INSERT = "insert into CRA ( id_cra, fk_id_collaborateur, periode, date_creation, date_validation, check_modif ) values ( ?, ?, ?, ?, ?, ? )";

	private final static String SQL_UPDATE = "update CRA set fk_id_collaborateur = ?, periode = ?, date_creation = ?, date_validation = ?, check_modif = ? where id_cra = ?";

	private final static String SQL_DELETE = "delete from CRA where id_cra = ?";

	private final static String SQL_COUNT_ALL = "select count(*) from CRA";

	private final static String SQL_COUNT = "select count(*) from CRA where id_cra = ?";

	private final static String SQL_SELECT_BY_COLLABORATEUR = "select id_cra, fk_id_collaborateur, periode, date_creation, date_validation, check_modif from CRA where fk_id_collaborateur = ?";

	// ----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public CraDAOImplSpring() {
		super();
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public Cra find(Integer idCra) {
		Object[] primaryKey = new Object[] { idCra };
		return super.doSelect(primaryKey);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public boolean load(Cra cra) {
		return super.doSelect(cra);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public void insert(Cra cra) {
		super.doInsert(cra);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public int update(Cra cra) {
		return super.doUpdate(cra);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public int delete(Integer idCra) {
		Object[] primaryKey = new Object[] { idCra };
		return super.doDelete(primaryKey);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public int delete(Cra cra) {
		return super.doDelete(cra);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public boolean exists(Integer idCra) {
		Object[] primaryKey = new Object[] { idCra };
		return super.doExists(primaryKey);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public boolean exists(Cra cra) {
		return super.doExists(cra);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public long count() {
		return super.doCountAll();
	}

	// ----------------------------------------------------------------------
	// Super class abstract methods implementation
	// ----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT;
	}

	// ----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT;
	}

	// ----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE;
	}

	// ----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE;
	}

	// ----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT;
	}

	// ----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL;
	}

	// ----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForInsert(Cra cra) {
		return new Object[] {
				// --- Returns PRIMARY KEY and DATA ( for SQL
				// "SET x=?, y=?, ..." )
				cra.getIdCra(), // "id_cra" : java.lang.Integer
				cra.getFkIdCollaborateur(), // "fk_id_collaborateur" :
											// java.lang.Integer
				cra.getPeriode(), // "periode" : java.util.Date
				cra.getDateCreation(), // "date_creation" : java.util.Date
				cra.getDateValidation(), // "date_validation" : java.util.Date
				cra.getCheckModif() // "check_modif" : java.lang.Boolean
		};
	}

	// ----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForUpdate(Cra cra) {
		return new Object[] {
				// --- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
				cra.getFkIdCollaborateur(), // "fk_id_collaborateur" :
											// java.lang.Integer
				cra.getPeriode(), // "periode" : java.util.Date
				cra.getDateCreation(), // "date_creation" : java.util.Date
				cra.getDateValidation(), // "date_validation" : java.util.Date
				cra.getCheckModif(), // "check_modif" : java.lang.Boolean
				// --- Returns PRIMARY KEY at the end ( for SQL
				// "WHERE key=?, ..." )
				cra.getIdCra() // "id_cra" : java.lang.Integer
		};
	}

	// ----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForPrimaryKey(Cra cra) {
		return new Object[] {
		// --- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
		cra.getIdCra() // "id_cra" : java.lang.Integer
		};
	}

	// ----------------------------------------------------------------------
	@Override
	protected RowMapper<Cra> getRowMapper(Cra o) {
		// --- RowMapper to populate the given bean instance
		return new CraRowMapper(o);
	}

	// ----------------------------------------------------------------------
	@Override
	protected RowMapper<Cra> getRowMapper() {
		// --- RowMapper to populate a new bean instance
		return new CraRowMapper(new Cra());
	}

	// ----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * 
	 * @param rs
	 * @param cra
	 * @throws SQLException
	 */
	private void populateBean(ResultSet rs, Cra cra) throws SQLException {

		// --- Set data from ResultSet to Bean attributes
		cra.setIdCra(rs.getInt("id_cra")); // java.lang.Integer
		if (rs.wasNull()) {
			cra.setIdCra(null);
		}
		; // not primitive number => keep null value if any
		cra.setFkIdCollaborateur(rs.getInt("fk_id_collaborateur")); // java.lang.Integer
		if (rs.wasNull()) {
			cra.setFkIdCollaborateur(null);
		}
		; // not primitive number => keep null value if any
		cra.setPeriode(rs.getDate("periode")); // java.util.Date
		cra.setDateCreation(rs.getDate("date_creation")); // java.util.Date
		cra.setDateValidation(rs.getDate("date_validation")); // java.util.Date
		cra.setCheckModif(rs.getBoolean("check_modif")); // java.lang.Boolean
	}

	// ----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class CraRowMapper implements RowMapper<Cra> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private final Cra bean;

		/**
		 * Constructor
		 * 
		 * @param bean
		 *            the bean to be populated
		 */
		CraRowMapper(Cra bean) {
			this.bean = bean;
		}

		@Override
		public Cra mapRow(ResultSet rs, int rowNum) throws SQLException {
			populateBean(rs, this.bean);
			return this.bean;
		}
	}

	@Override
	public List<Cra> findByCollaborateur(Collaborateur collaborateur) {
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		// --- Try to find the record. NB : Spring throws
		// "EmptyResultDataAccessException" if not found
		try {
			return jdbcTemplate.query(SQL_SELECT_BY_COLLABORATEUR,
					new Object[] { collaborateur.getIdCollaborateur() },
					new BeanPropertyRowMapper<Cra>(Cra.class));
		} catch (EmptyResultDataAccessException e) {
			// Nothing to do, just return null
			return null;

		}
	}
}
