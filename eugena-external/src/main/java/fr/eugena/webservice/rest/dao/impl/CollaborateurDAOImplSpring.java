/*
 * Created on 20 f√©vr. 2017 ( Time 04:16:10 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package fr.eugena.webservice.rest.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import fr.eugena.webservice.rest.bean.Collaborateur;
import fr.eugena.webservice.rest.dao.CollaborateurDAO;
import fr.eugena.webservice.rest.dao.GenericDAO;

/**
 * Collaborateur DAO implementation
 * 
 * @author Telosys Tools
 *
 */
@Repository
public class CollaborateurDAOImplSpring extends GenericDAO<Collaborateur>
		implements CollaborateurDAO {

	private final static String SQL_SELECT = "select id_collaborateur, login, password, nom, prenom, date_creation from Collaborateur where id_collaborateur = ?";

	private final static String SQL_INSERT = "insert into Collaborateur ( id_collaborateur, login, password, nom, prenom, date_creation ) values ( ?, ?, ?, ?, ?, ? )";

	private final static String SQL_UPDATE = "update Collaborateur set login = ?, password = ?, nom = ?, prenom = ?, date_creation = ? where id_collaborateur = ?";

	private final static String SQL_DELETE = "delete from Collaborateur where id_collaborateur = ?";

	private final static String SQL_COUNT_ALL = "select count(*) from Collaborateur";

	private final static String SQL_COUNT = "select count(*) from Collaborateur where id_collaborateur = ?";

	private final static String SQL_SELECT_BY_LOGIN_AND_PASSWORD = "select id_collaborateur, login, password, nom, prenom, date_creation from Collaborateur where login = ? and password = ?";

	// ----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public CollaborateurDAOImplSpring() {
		super();
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public Collaborateur find(Integer idCollaborateur) {
		Object[] primaryKey = new Object[] { idCollaborateur };
		return super.doSelect(primaryKey);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public boolean load(Collaborateur collaborateur) {
		return super.doSelect(collaborateur);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public void insert(Collaborateur collaborateur) {
		super.doInsert(collaborateur);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public int update(Collaborateur collaborateur) {
		return super.doUpdate(collaborateur);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public int delete(Integer idCollaborateur) {
		Object[] primaryKey = new Object[] { idCollaborateur };
		return super.doDelete(primaryKey);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public int delete(Collaborateur collaborateur) {
		return super.doDelete(collaborateur);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public boolean exists(Integer idCollaborateur) {
		Object[] primaryKey = new Object[] { idCollaborateur };
		return super.doExists(primaryKey);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public boolean exists(Collaborateur collaborateur) {
		return super.doExists(collaborateur);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc) DAO interface implementation
	 */
	@Override
	public long count() {
		return super.doCountAll();
	}

	// ----------------------------------------------------------------------
	// Super class abstract methods implementation
	// ----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT;
	}

	// ----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT;
	}

	// ----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE;
	}

	// ----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE;
	}

	// ----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT;
	}

	// ----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL;
	}

	// ----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForInsert(Collaborateur collaborateur) {
		return new Object[] {
				// --- Returns PRIMARY KEY and DATA ( for SQL
				// "SET x=?, y=?, ..." )
				collaborateur.getIdCollaborateur(), // "id_collaborateur" :
													// java.lang.Integer
				collaborateur.getLogin(), // "login" : java.lang.String
				collaborateur.getPassword(), // "password" : java.lang.String
				collaborateur.getNom(), // "nom" : java.lang.String
				collaborateur.getPrenom(), // "prenom" : java.lang.String
				collaborateur.getDateCreation() // "date_creation" :
												// java.util.Date
		};
	}

	// ----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForUpdate(Collaborateur collaborateur) {
		return new Object[] {
				// --- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
				collaborateur.getLogin(), // "login" : java.lang.String
				collaborateur.getPassword(), // "password" : java.lang.String
				collaborateur.getNom(), // "nom" : java.lang.String
				collaborateur.getPrenom(), // "prenom" : java.lang.String
				collaborateur.getDateCreation(), // "date_creation" :
													// java.util.Date
				// --- Returns PRIMARY KEY at the end ( for SQL
				// "WHERE key=?, ..." )
				collaborateur.getIdCollaborateur() // "id_collaborateur" :
													// java.lang.Integer
		};
	}

	// ----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForPrimaryKey(Collaborateur collaborateur) {
		return new Object[] {
		// --- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
		collaborateur.getIdCollaborateur() // "id_collaborateur" :
											// java.lang.Integer
		};
	}

	// ----------------------------------------------------------------------
	@Override
	protected RowMapper<Collaborateur> getRowMapper(Collaborateur o) {
		// --- RowMapper to populate the given bean instance
		return new CollaborateurRowMapper(o);
	}

	// ----------------------------------------------------------------------
	@Override
	protected RowMapper<Collaborateur> getRowMapper() {
		// --- RowMapper to populate a new bean instance
		return new CollaborateurRowMapper(new Collaborateur());
	}

	// ----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * 
	 * @param rs
	 * @param collaborateur
	 * @throws SQLException
	 */
	private void populateBean(ResultSet rs, Collaborateur collaborateur)
			throws SQLException {

		// --- Set data from ResultSet to Bean attributes
		collaborateur.setIdCollaborateur(rs.getInt("id_collaborateur")); // java.lang.Integer
		if (rs.wasNull()) {
			collaborateur.setIdCollaborateur(null);
		}
		; // not primitive number => keep null value if any
		collaborateur.setLogin(rs.getString("login")); // java.lang.String
		collaborateur.setPassword(rs.getString("password")); // java.lang.String
		collaborateur.setNom(rs.getString("nom")); // java.lang.String
		collaborateur.setPrenom(rs.getString("prenom")); // java.lang.String
		collaborateur.setDateCreation(rs.getDate("date_creation")); // java.util.Date
	}

	// ----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class CollaborateurRowMapper implements RowMapper<Collaborateur> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private final Collaborateur bean;

		/**
		 * Constructor
		 * 
		 * @param bean
		 *            the bean to be populated
		 */
		CollaborateurRowMapper(Collaborateur bean) {
			this.bean = bean;
		}

		@Override
		public Collaborateur mapRow(ResultSet rs, int rowNum)
				throws SQLException {
			populateBean(rs, this.bean);
			return this.bean;
		}
	}

	/*
	 * (non-Javadoc)
	 * @see fr.eugena.webservice.rest.dao.CollaborateurDAO#findByLoginAndPassword(java.lang.String, java.lang.String)
	 */
	public Collaborateur findByLoginAndPassword(String login, String password) {
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		// --- Try to find the record. NB : Spring throws
		// "EmptyResultDataAccessException" if not found
		try {
			return jdbcTemplate.queryForObject(
					SQL_SELECT_BY_LOGIN_AND_PASSWORD, new Object[] { login,
							password },
					new BeanPropertyRowMapper<Collaborateur>(
							Collaborateur.class));
		} catch (EmptyResultDataAccessException e) {
			// Nothing to do, just return null
			return null;

		}

	}
}
