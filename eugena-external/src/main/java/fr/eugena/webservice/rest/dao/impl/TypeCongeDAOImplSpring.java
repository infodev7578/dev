/*
 * Created on 20 f√©vr. 2017 ( Time 04:16:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package fr.eugena.webservice.rest.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import fr.eugena.webservice.rest.bean.TypeConge;
import fr.eugena.webservice.rest.dao.GenericDAO;
import fr.eugena.webservice.rest.dao.TypeCongeDAO;

/**
 * TypeConge DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
@Repository
public class TypeCongeDAOImplSpring extends GenericDAO<TypeConge> implements TypeCongeDAO {

	private final static String SQL_SELECT = 
		"select id_type_conge, code, label from Type_conge where id_type_conge = ?";


	private final static String SQL_INSERT = 
		"insert into Type_conge ( id_type_conge, code, label ) values ( ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update Type_conge set code = ?, label = ? where id_type_conge = ?";

	private final static String SQL_DELETE = 
		"delete from Type_conge where id_type_conge = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from Type_conge";

	private final static String SQL_COUNT = 
		"select count(*) from Type_conge where id_type_conge = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public TypeCongeDAOImplSpring() {
		super();
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public TypeConge find( Integer idTypeConge ) {
		Object[] primaryKey = new Object[] { idTypeConge };
		return super.doSelect(primaryKey);		
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public boolean load( TypeConge typeConge ) {
		return super.doSelect(typeConge) ;
	}
	
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public void insert(TypeConge typeConge) {
		super.doInsert(typeConge);
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public int update(TypeConge typeConge) {
		return super.doUpdate(typeConge);
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public int delete( Integer idTypeConge ) {
		Object[] primaryKey = new Object[] { idTypeConge };
		return super.doDelete(primaryKey);		
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public int delete( TypeConge typeConge ) {
		return super.doDelete(typeConge);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public boolean exists( Integer idTypeConge ) {
		Object[] primaryKey = new Object[] { idTypeConge };
		return super.doExists(primaryKey);
	}
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public boolean exists( TypeConge typeConge ) {
		return super.doExists(typeConge);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	// Super class abstract methods implementation
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}
	//----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForInsert(TypeConge typeConge)  {
		return new Object[] {
			//--- Returns PRIMARY KEY and DATA ( for SQL "SET x=?, y=?, ..." )
			typeConge.getIdTypeConge() , // "id_type_conge" : java.lang.Integer
			typeConge.getCode() , // "code" : java.lang.String
			typeConge.getLabel()  // "label" : java.lang.String
		};
	}
    //----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForUpdate(TypeConge typeConge) {
		return new Object[] {		
			//--- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
			typeConge.getCode(), // "code" : java.lang.String
			typeConge.getLabel(), // "label" : java.lang.String
			//--- Returns PRIMARY KEY at the end ( for SQL "WHERE key=?, ..." )
			typeConge.getIdTypeConge()  // "id_type_conge" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForPrimaryKey(TypeConge typeConge)  {
		return new Object[] {
			//--- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
			typeConge.getIdTypeConge()  // "id_type_conge" : java.lang.Integer
		};
	}
	//----------------------------------------------------------------------
	@Override
	protected RowMapper<TypeConge> getRowMapper(TypeConge o)  {
		//--- RowMapper to populate the given bean instance
		return new TypeCongeRowMapper(o) ;
	}
	//----------------------------------------------------------------------
	@Override
	protected RowMapper<TypeConge> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		return new TypeCongeRowMapper( new TypeConge() ) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param typeConge
	 * @throws SQLException
	 */
	private void populateBean(ResultSet rs, TypeConge typeConge) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		typeConge.setIdTypeConge(rs.getInt("id_type_conge")); // java.lang.Integer
		if ( rs.wasNull() ) { typeConge.setIdTypeConge(null); }; // not primitive number => keep null value if any
		typeConge.setCode(rs.getString("code")); // java.lang.String
		typeConge.setLabel(rs.getString("label")); // java.lang.String
	}

    //----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class TypeCongeRowMapper implements RowMapper<TypeConge> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private final TypeConge bean ;
		
		/**
		 * Constructor
		 * @param bean the bean to be populated 
		 */
		TypeCongeRowMapper(TypeConge bean) {
			this.bean = bean ;
		}
		
		@Override
		public TypeConge mapRow(ResultSet rs, int rowNum) throws SQLException {
			populateBean(rs, this.bean);
			return this.bean;
		}
	}
}
